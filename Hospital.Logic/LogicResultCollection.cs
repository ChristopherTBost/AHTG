using System.Collections.Generic;
using System.Text;

namespace AHTG.Hospital.Logic
{

    /// <summary>
    /// a collection of results generated by business logic
    /// </summary>
    public class LogicResultCollection : List<LogicResult>
    {
        /// <summary>
        /// the Default has no Results, thus IsOk is always true
        /// </summary>
        public static LogicResultCollection Default = new LogicResultCollection();

        /// <summary>
        /// is true if there are no Results or all Results are ResultType.Ok
        /// </summary>
        public bool IsOk => this.TrueForAll(_ => _.Type == ResultType.Ok);

        /// <summary>
        /// returns a bool based on IsOk
        /// <param name="logicResults"></param>
        /// </summary>
        /// <remarks>
        /// this is more of a convenience to support simple if's. some people hate it.
        /// if had conditions where the "Is..." properties have changed. this allows for the "Ifs" to remain unchanged
        /// 
        /// e.g.
        /// if(result) as apposed to if(result.IsOk)
        /// </remarks>
        public static implicit operator bool(LogicResultCollection logicResults) => logicResults?.IsOk ?? false;

        /// <summary>
        /// default constructor
        /// </summary>
        internal LogicResultCollection()
            : base() { }

        /// <summary>
        /// constructor that supports a single or multiple results
        /// </summary>
        /// <param name="results">the results to populate the collection with</param>
        internal LogicResultCollection(params LogicResult[] results)
            : this((IEnumerable<LogicResult>)results) { }

        /// <summary>
        /// supports passing an existing list of results
        /// </summary>
        /// <param name="results">the results to populate the collection with</param>
        internal LogicResultCollection(IEnumerable<LogicResult> results)
            : base(results) { }

        /// <summary>
        /// creates a new result collection based on a shallow copy of the results found in <paramref name="logicResults"/>
        /// </summary>
        /// <param name="logicResults">an existing result collection</param>
        internal LogicResultCollection(LogicResultCollection logicResults)
            : base(logicResults) { }
    }
}
